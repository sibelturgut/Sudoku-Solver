def solver():

    sudoku_grid = [
        [7, 0, 6, 9, 0, 3, 0, 0, 4],
        [0, 3, 0, 0, 8, 0, 0, 0, 0],
        [0, 0, 0, 0, 2, 0, 0, 9, 0],
        [0, 0, 4, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 3, 0, 0, 0, 0],
        [0, 6, 0, 5, 0, 7, 0, 8, 0],
        [5, 0, 0, 0, 0, 0, 0, 0, 8],
        [0, 0, 0, 2, 0, 0, 0, 0, 0],
        [0, 7, 0, 6, 0, 9, 0, 5, 0]
    ]

    possibility_arrays = [[[] for _ in range(9)] for _ in range(9)]

    def get_mutual_occurrences(arr1, arr2):
        mutual_occurrences = []
        for elem in arr1:
            if elem in arr2:
                mutual_occurrences.append(elem)
        return mutual_occurrences

    def is_valid(row, column, num):
        # Check if the number already exists in the row
        if num in sudoku_grid[row]:
            return False

        # Check if the number already exists in the column
        for i in range(9):
            if sudoku_grid[i][column] == num:
                return False

        # Check if the number already exists in the 3x3 grid
        start_row = (row // 3) * 3
        start_col = (column // 3) * 3
        for a in range(start_row, start_row + 3):
            for b in range(start_col, start_col + 3):
                if sudoku_grid[a][b] == num:
                    return False

        return True

    def change_value(row, column, value):

        if is_valid(row,column,value):
            sudoku_grid[row][column] = value
            possibility_arrays[row][column] = []

            for k in range(9):
                if value in possibility_arrays[k][column]:
                    possibility_arrays[k][column].remove(value)
                if value in possibility_arrays[row][k]:
                    possibility_arrays[row][k].remove(value)

            start_row = (row // 3) * 3
            start_col = (column // 3) * 3
            for a in range(start_row, start_row + 3):
                for b in range(start_col, start_col + 3):
                    if value in possibility_arrays[a][b]:
                        possibility_arrays[a][b].remove(value)
        else:
            print("THERE IS A MISTAKE")

    def check_single_arrays():  # True if there is not any single elemented arrays
        for i in range(9):
            for j in range(9):
                if len(possibility_arrays[i][j]) == 1:
                    return False
        return True

    def is_all_found():
        for i in range(9):
            for j in range(9):
                if len(possibility_arrays[i][j]) != 0:
                    return False
        return True

    def create_possibility_arrays():
        for row in range(9):
            for col in range(9):
                possibility_arrays[row][col]=[]
                if sudoku_grid[row][col] == 0:
                    for num in range(1,10):
                        if is_valid(row,col,num):
                            possibility_arrays[row][col].append(num)

    def hidden_singles():  # Checks for hidden singles
        for i in range(9):
            for j in range(9):
                if len(possibility_arrays[i][j]) > 1:

                    for value in possibility_arrays[i][j]:
                        value_found = False
                        for k in range(9):
                            if k != i and value in possibility_arrays[k][j]:
                                value_found = True
                                break
                            if value_found:
                                break
                        if not value_found:
                            change_value(i, j, value)
                            break
                        for k in range(9):
                            if k != j and value in possibility_arrays[i][k]:
                                value_found = True
                                break
                            if value_found:
                                break
                        if not value_found:
                            change_value(i, j, value)
                            break
                        start_row = (i // 3) * 3
                        start_col = (j // 3) * 3
                        for x in range(start_row, start_row + 3):
                            for y in range(start_col, start_col + 3):
                                if (x != i or y != j) and value in possibility_arrays[x][y]:
                                    value_found = True
                                    break
                            if value_found:
                                break
                        if not value_found:
                            change_value(i, j, value)
                            break

    def pointing_occurrences():
        # Pointing pairs and triples
        for i in range(9):
            for j in range(9):
                cell_possibility = possibility_arrays[i][j]
                start_row = (i // 3) * 3
                start_col = (j // 3) * 3
                if len(cell_possibility) > 1:

                    for value in cell_possibility:
                        row_keeper = []
                        col_keeper = []
                        for x in range(start_row, start_row + 3):
                            for y in range(start_col, start_col + 3):
                                if value in possibility_arrays[x][y]:
                                    row_keeper.append(x)
                                    col_keeper.append(y)
                        if all(element == row_keeper[0] for element in row_keeper):
                            for k in range(9):
                                if (k < start_col or k >= start_col + 3) and value in possibility_arrays[i][k]:
                                    possibility_arrays[i][k].remove(value)
                        if all(element == col_keeper[0] for element in col_keeper):
                            for k in range(9):
                                if (k < start_row or k >= start_row + 3) and value in possibility_arrays[k][j]:
                                    possibility_arrays[k][j].remove(value)

    def naked_pairs():
        for i in range(9):
            for j in range(9):
                cell_possibility = possibility_arrays[i][j]
                if len(cell_possibility) == 2:
                    for x in range(9):
                        if x != j and possibility_arrays[i][x] == cell_possibility:
                            # Found a naked pair in the same row
                            for y in range(9):
                                if y != j and y != x:
                                    for value in cell_possibility:
                                        if value in possibility_arrays[i][y]:
                                            possibility_arrays[i][y].remove(value)

                    for y in range(9):
                        if y != i and possibility_arrays[y][j] == cell_possibility:
                            # Found a naked pair in the same column
                            for x in range(9):
                                if x != i and x != y:
                                    for value in cell_possibility:
                                        if value in possibility_arrays[x][j]:
                                            possibility_arrays[x][j].remove(value)

                    start_row = (i // 3) * 3
                    start_col = (j // 3) * 3
                    for x in range(start_row, start_row + 3):
                        for y in range(start_col, start_col + 3):
                            if (x != i or y != j) and possibility_arrays[x][y] == cell_possibility:
                                # Found a naked pair in the same 3x3 grid
                                for a in range(start_row, start_row + 3):
                                    for b in range(start_col, start_col + 3):
                                        if (a != i or b != j) and (a != x or b != y):
                                            for value in cell_possibility:
                                                if value in possibility_arrays[a][b]:
                                                    possibility_arrays[a][b].remove(value)

    def hidden_occurrences(pair_no):
        # pair_no=2 for hidden_pairs, and 3 for hidden_triples
        for i in range(9):
            for j in range(9):
                cell_possibilities = possibility_arrays[i][j]
                if len(cell_possibilities) > (pair_no - 1):
                    for k in range(9):
                        count = 0
                        keep_row = 0
                        keep_column = 0
                        mutual_array = get_mutual_occurrences(cell_possibilities, possibility_arrays[i][k])
                        if k != j and len(mutual_array) == pair_no:
                            for x in range(9):
                                if x != j and x != k and len(get_mutual_occurrences(mutual_array, possibility_arrays[i][x])) > 0:
                                    count += 1
                                    keep_row = i
                                    keep_column = x
                            if count == (pair_no - 2):
                                is_found = True
                                for u in range(9):
                                    if u != j and u != k and u != keep_column and len(
                                            get_mutual_occurrences(mutual_array, possibility_arrays[i][u])) > 0:
                                        is_found = False
                                if is_found:
                                    possibility_arrays[i][j] = mutual_array.copy()
                                    possibility_arrays[i][k] = mutual_array.copy()
                                    if pair_no == 3:
                                        possibility_arrays[keep_row][keep_column] = mutual_array.copy()

                    for k in range(9):
                        count = 0
                        keep_row = 0
                        keep_column = 0
                        mutual_array = get_mutual_occurrences(cell_possibilities, possibility_arrays[k][j])
                        if k != i and len(mutual_array) == pair_no:
                            for x in range(9):
                                if x != i and x != k and len(get_mutual_occurrences(mutual_array, possibility_arrays[x][j])) > 0:
                                    count += 1
                                    keep_row = x
                                    keep_column = j
                            if count == (pair_no - 2):
                                is_found = True
                                for u in range(9):
                                    if u != i and u != k and u != keep_row and len(
                                            get_mutual_occurrences(mutual_array, possibility_arrays[u][j])) > 0:
                                        is_found = False
                                if is_found:
                                    possibility_arrays[i][j] = mutual_array.copy()
                                    possibility_arrays[k][j] = mutual_array.copy()
                                    if pair_no == 3:
                                        possibility_arrays[keep_row][keep_column] = mutual_array.copy()

                    start_row = (i // 3) * 3
                    start_col = (j // 3) * 3
                    for x in range(start_row, start_row + 3):
                        for y in range(start_col, start_col + 3):
                            count = 0
                            keep_row = 0
                            keep_column = 0
                            mutual_array = get_mutual_occurrences(cell_possibilities, possibility_arrays[x][y])
                            if x != i and y != j and len(mutual_array) == pair_no:
                                for a in range(start_row, start_row + 3):
                                    for b in range(start_col, start_col + 3):
                                        if (a != i or b != j) and (a != x or b != y) and len(get_mutual_occurrences(mutual_array, possibility_arrays[a][b])) > 0:
                                            count += 1
                                            keep_row = a
                                            keep_column = b
                                if count == (pair_no - 2):
                                    is_found = True
                                    for u in range(9):
                                        for v in range(9):
                                            if (u != i or v != j) and (u != x or v != y) and (
                                                    u != keep_row or v != keep_column) and len(
                                                    get_mutual_occurrences(mutual_array, possibility_arrays[u][v])) > 0:
                                                is_found = False
                                    if is_found:
                                        possibility_arrays[i][j] = mutual_array.copy()
                                        possibility_arrays[x][y] = mutual_array.copy()
                                        if pair_no == 3:
                                            possibility_arrays[keep_row][keep_column] = mutual_array.copy()

    def do_elimination():
        while not check_single_arrays():
            for i in range(9):
                for j in range(9):
                    if len(possibility_arrays[i][j]) == 1:
                        change_value(i, j, possibility_arrays[i][j][0])
        pointing_occurrences()
        hidden_singles()
        naked_pairs()
        hidden_occurrences(2)
        hidden_occurrences(3)

    def find_result():
        max_attempts = 0
        create_possibility_arrays()
        while not is_all_found():
            do_elimination()
            max_attempts += 1
            if max_attempts > 15:
                print("The sudoku is WRONG! Please check and re-run again!")
                break
        if max_attempts < 15:
            print("I have finished sudoku successfully! Here is the completed version:")
            for i in range(9):
                print(sudoku_grid[i])

    find_result()


solver()
